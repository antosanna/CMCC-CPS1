;***************************************************************
; NCL script
; regrid 6hr vars from ne60np4 to reg1x1
; for masked variables define and apply the mask after interpolation
;***************************************************************
load "$NCARG_ROOT/lib/ncarg/nclscripts/csm/gsn_code.ncl"
load "$NCARG_ROOT/lib/ncarg/nclscripts/csm/gsn_csm.ncl"
load "$NCARG_ROOT/lib/ncarg/nclscripts/csm/contributed.ncl"
load "$NCARG_ROOT/lib/ncarg/nclscripts/esmf/ESMF_regridding.ncl"
load "$HOME//SPS/CMCC-SPS3.5/src/templates/C3S_globalatt.ncl"

undef ("definitions")
function definitions(var,level,dst_file,plev,nlev,lat,nlat,lon,mlon,time,nt,frqvar,C3S_type)
begin
     yyyy=getenv("yyyy")
     st=getenv("st")
     if (frqvar.eq."12hr" ) then
           dimNames = (/"time","plev","lat","lon"/)
           dimSizes = (/ nt   ,  nlev,  nlat , mlon/)
           dimUnlim = (/ False ,  False,  False,    False  /)
     else if (frqvar.eq."6hr" .or. frqvar.eq."day") then
           dimNames = (/  "time","lat",    "lon"/)  
           dimSizes = (/  nt, nlat ,   mlon /) 
           dimUnlim = (/    False,False,    False  /)   
     else
        dimNames = (/ "lat",    "lon"/)  
        dimSizes = (/ nlat ,   mlon  /) 
        dimUnlim = (/ False,    False  /)   
     end if
     end if
     filedimdef(dst_file,dimNames,dimSizes,dimUnlim)
;
     if (frqvar.eq."12hr" ) then
         filevardef(dst_file, "plev", C3S_type, getvardims(plev))
         filevarattdef(dst_file,"plev" ,plev)
     end if
     filevardef(dst_file, "lat", C3S_type, getvardims(lat)) 
     filevarattdef(dst_file,"lat" ,lat)           
 
     filevardef(dst_file, "lon", C3S_type, getvardims(lon)) 
     filevarattdef(dst_file,"lon" ,lon)           

     filevardef(dst_file, "time", C3S_type, "time")
     filevarattdef(dst_file,"time" ,time)           

     dst_file->time = (/time/)

     if (frqvar.eq."12hr") then
           dst_file->plev = (/ plev*100 /)
     end if
     dst_file->lat = (/ lat /)
     dst_file->lon = (/ lon /)

; trick. I do not know how to do without
     x=0.
     return(x)
end

begin

  srcFileName   = getenv("inputSE")
  dstFileName   = getenv("output")
  wgtFileName   = getenv("wgtFileName")
  srcGridName   = getenv("srcGridName")
  dstGridName   = getenv("dstGridName")

; output required precision
  C3S_type="double"
  C3S_type_var="float"

  print("Beginning to regrid "+srcFileName)

; --- Define grid
  outputgrid=getenv("outputgrid")
  nx=getenv("nx")
  ny=getenv("ny")
  grid_type = getenv("grid_type")

; 0. Set the source/destination file names, 
;    open the source file for reading, 
;    create a destination file for regridded data.
;------------------------------------------------

  print(" ")
  print("Regridding: ")
  print("SRC:"+srcFileName)
  if(isfilepresent(dstFileName)) then
      system("rm "+dstFileName)
  end if
  src_file=addfile(srcFileName,"r")

;
; 1. Generate a description file for the source grid (SE).
;---------------------------------------------------
  if(isfilepresent(srcGridName)) then
      print("Found srcGrid description "+srcGridName)
  else
      print("Creating srcGrid description "+srcGridName)
      Opt               =True
      Opt@ForceOverWrite=True
      Opt@Title         ="SE Grid"  
      Opt@Debug         =False ; True
      Opt@PrintTimings  =False ; True
      unstructured_to_ESMF(srcGridName,src_file->lat,src_file->lon,Opt)
      delete(Opt)
  end if

;
; 2. Generate a description file for the destination grid.
;-----------------------------------------------------
  dstGridName =getenv("dstGridName")
  if(isfilepresent(dstGridName)) then
      print("Found dstGrid description "+dstGridName)
  else
      print("Creating dstGrid description "+dstGridName)
      if(outputgrid.eq."reg1x1") then
        Opt                = True
        Opt@LLCorner       = (/-89.5,.5 /)
        Opt@URCorner       = (/ 89.5, 359.5 /)
        Opt@ForceOverwrite = True
        Opt@PrintTimings   = True
        Opt@Title          = "World grid 1x1 degree resolution"

        latlon_to_SCRIP(dstGridName,"1deg",Opt)

;---Clean up
        delete(Opt)
    else
        Opt               =True
        Opt@ForceOverWrite=True
        Opt@Debug         =False ; True
        Opt@PrintTimings  =False ; True
        lats              =latGlobeF(ny,"lat","latitude" ,"degrees_north")
        lons              =lonGlobeF(nx,"lon","longitude","degrees_east" )
        rectilinear_to_SCRIP(dstGridName,lats,lons,Opt)
        delete(lats)
        delete(lons)
        delete(Opt)
    end if
  end if

;
; 3. Generate the weights file, using the source and 
;    destination files created in #1 and #2.
;-----------------------------------------------------
  if(isfilepresent(wgtFileName)) then
      print("Found WeightFile "+wgtFileName)
  else
      print("Creating WeightFile "+wgtFileName)
      Opt               = True
      Opt@InterpMethod  ="bilinear" ; "patch", "conserve"
      Opt@ForceOverWrite=True
      Opt@SrcESMF       =True   
      Opt@Debug         =False ; True
      Opt@PrintTimings  =False ; True
      ESMF_regrid_gen_weights(srcGridName,dstGridName,wgtFileName,Opt)
      delete(Opt)
  end if

;---Read from the weight file the method used to derive the remap weights
  wgt_file       = addfile(wgtFileName, "r")
  dst_grid_dims  = wgt_file->dst_grid_dims
  dst_mlon       = dst_grid_dims(0)
  dst_nlat       = dst_grid_dims(1)
  dst_lat        = wgt_file->yc_b(::dst_mlon)
  dst_lon        = wgt_file->xc_b(:dst_mlon-1)

; =====================================================================
; Define input var list and output var and realm list 
; =====================================================================

  C3Stable=getenv("C3Stable")
  strs = asciiread(C3Stable,-1,"string")
  delim=","
  nfield = str_fields_count(strs(0), delim)
  field=1
  varin = str_get_field(strs(1:), field, delim) 
  field=2
  varout = str_get_field(strs(1:), field, delim) 
  field=3
  dimNames = str_get_field(strs(1:), field, delim) 
  field=4
  LongName = str_get_field(strs(1:), field, delim) 
  field=5
  StandardName = str_get_field(strs(1:), field, delim) 
  field=6
  units = str_get_field(strs(1:), field, delim) 
  field=7
  frq = str_get_field(strs(1:), field, delim) 
  field=8
  level = str_get_field(strs(1:), field, delim) 
  field=9
  realm = str_get_field(strs(1:), field, delim) 
  field=10
  conv_fac = tofloat(str_get_field(strs(1:), field, delim) )
  field=11
  add_fac = tofloat(str_get_field(strs(1:), field, delim) )
  field=12
  coordinates = str_get_field(strs(1:), field, delim )
  field=13
  cell_method = str_get_field(strs(1:), field, delim )
  field=14
  varflg = toint(str_get_field(strs(1:), field, delim ))
  field=15
  type = str_get_field(strs(1:), field, delim )

  typein=getenv("typein")  ; output frequency

  if (typein.eq."h2")then
;     plev       = (/1000.,925.,850.,700.,500.,400.,300.,200.,100.,50.,30.,10./)
     plev       = (/850.,500.,200./)
     plev!0     = "plev"
     plev@units = "Pa"
     plev@long_name = "pressure" ;
     plev@standard_name = "air_pressure" ;
     plev@axis = "Z" ;
     plev@positive = "down" ;
     plev&plev   =  plev
  else
     plev=0     ; you need to define plev and nlev for function
                ; definitions
  end if

;---Use the destination grid info on the weight file to create lat/lon
  lat       = dst_lat                  ; get from weight file
  lat!0     = "lat"
  lat@units = "degrees_north" ;
  lat@long_name = "latitude" ;
  lat@standard_name = "latitude" ;
  lat@axis = "Y" ;
  lat@valid_min = -90. ;
  lat@valid_max = 90. ;
  lat&lat   =  lat
  nlat      = dimsizes(lat)            ; same as dst_nlat

  lon       = dst_lon
  lon!0     = "lon"
  lon&lon   =  lon
  lon@units = "degrees_east" ;
  lon@long_name = "longitude" ;
  lon@standard_name = "longitude" ;
  lon@axis = "X" ;
  lon@valid_min = 0. ;
  lon@valid_max = 360. ;
  mlon      = dimsizes(lon)            ; same as dst_mlon

  yyyy=getenv("yyyy")
  st=getenv("st")

  Opt_RGRD  = True

; Get extra vars needed to postproc
  if (typein.eq."h1")then
; CAM does not output u10 and v10 but the module only
;     wind10=src_file->U10
; last dynamical level is about 60m
;     u60=src_file->UBOT
;     v60=src_file->VBOT
; Define some quantities needed for pp
;     wind60=tofloat(sqrt(u60^2+v60^2))
;     rapporto=where(wind60.ne.0.,wind10/wind60,0.)
  end if

;===================================================================
; get the coordinate dimension names and their sizes
;===================================================================
  dNames   = getvardims(src_file)       ; get level info from source file
  dSizes   = getfiledimsizes(src_file)
  it       = ind(dNames.eq."time")
  if (typein.eq."h2")then
    ia       = ind(dNames.eq."lev" )   ; # of levels
    klev     = dSizes(ia)
;_________________________________________
; other needed vars for vinth2p_ecmwf
; PHIS,PS,hyam,hybm,P0mb=1000
;_________________________________________
    PHIS= tofloat(ESMF_regrid_with_weights(src_file->PHIS,wgtFileName,Opt_RGRD))
    PHIS=where(PHIS.lt.0.,0.,PHIS)
    PSFC= tofloat(ESMF_regrid_with_weights(src_file->PS,wgtFileName,Opt_RGRD)    )
    nave = 10  ;12hourly values==>5dd running mean
    opt = -1
    PSFC = runave_n (PSFC, nave, opt,0) ; return the series in the original array
    hyam= src_file->hyam
    hybm= src_file->hybm
    P0mb=1000.
    intyp=2   ;log interp
    kxtrp = True                          ; True=extrapolate
    tbot=ESMF_regrid_with_weights(src_file->T(:,klev-1,:),wgtFileName,Opt_RGRD)
  end if
  nt     = dSizes(it)
  timein=src_file->time

;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;                    PREDEFINE MODE
;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    

  do k=0,dimsizes(varin)-1
     if ( typein.eq.type(k)) then
        suffix=getenv("output05")
        dstFileName=suffix+varout(k)+".nc"
        print("DST:"+dstFileName)
        if(isfilepresent(dstFileName)) then
             system("rm "+dstFileName)
        end if
        setfileoption("nc","preFill",False)
        dst_file=addfile(dstFileName,"c")     
        setfileoption(dst_file,"DefineMode",True)
   
    ;===================================================================
   ; create global attributes of the netCDF file containing regridded data
   ;===================================================================
        stat=definitions(varout(k),level(k),dst_file,plev,dimsizes(plev),lat,nlat,lon,mlon,timein,nt,frq(k),C3S_type)
   ;===================================================================
   ; predefine the coordinate dimension names and their sizes
   ;===================================================================
   ;--- Loop over all variables and predfine meta data
        filevardef(dst_file,varout(k),C3S_type_var \
                                 , (/ "time", "lat", "lon" /)        )
        dumAtts = new( 1, C3S_type_var)
        dumAtts@long_name = LongName(k)
        dumAtts@standard_name = StandardName(k)
        dumAtts@units = units(k)
        dumAtts@coordinates = coordinates(k)
        filevarattdef(dst_file, varout(k) , dumAtts)
        delete([dumAtts])   ; may change size next iteration
   
   ;===================================================================
   ; explicitly exit file definition mode. **NOT REQUIRED in NCL**
   ;===================================================================
        setfileoption(dst_file,"DefineMode",False)
           
   ;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   ;        Write the basic and regridded data values to the predefined structures
   ;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   
        if (varout(k).ne."rlt") then
           var2regrid=conv_fac(k)*tofloat(src_file->$varin(k)$)+add_fac(k)
           print("variabile "+varout(k))
           dst_file->$varout(k)$ = (/ ESMF_regrid_with_weights(var2regrid,wgtFileName,Opt_RGRD) /)
           if ( varout(k).eq."uas") then
   ;__________________________________________________________
   ; derive u10 from ubot
   ;__________________________________________________________
              var2regrid=u60*rapporto
           end if
           if ( varout(k).eq."vas") then
   ;_________________________________________________________
   ; derive v10 from vbot
   ;__________________________________________________________
              var2regrid=v60*rapporto
           end if
           if ( varout(k).eq."sitemptop") then
   ;__________________________________________________________
   ; regrid icefrac from ne60np4 to reg1x1
   ;__________________________________________________________
              icefrac1x1=ESMF_regrid_with_weights(src_file->ICEFRAC,wgtFileName,Opt_RGRD)
   ;__________________________________________________________
   ; define icemask as 1 where icefrac > .15
   ;__________________________________________________________
              sim1x1=where(icefrac1x1.gt..15,1.,0.)
              ts1x1=ESMF_regrid_with_weights(src_file->TS,wgtFileName,Opt_RGRD)
              landfrac1x1=ESMF_regrid_with_weights(src_file->LANDFRAC,wgtFileName,Opt_RGRD)
   ;__________________________________________________________
   ; define lsm  as 1 where landfrac > .5
   ;__________________________________________________________
              lsm1x1=where(landfrac1x1.gt.0.5,1.,0.)
              ts1x1@_FillValue = 1.e+20
              ts1x1=where(lsm1x1.eq.1.,ts1x1@_FillValue,ts1x1)
              ts1x1=where(sim1x1.eq.0.,ts1x1@_FillValue,ts1x1)
   ;__________________________________________________________
   ; apply icemask to tskin
   ;__________________________________________________________
              dst_file->$varout(k)$ = (/ ts1x1/)
           end if
           if ( varout(k).eq."sst") then
   ;__________________________________________________________
   ; regrid icefrac from ne60np4 to reg1x1
   ;__________________________________________________________
              icefrac1x1=ESMF_regrid_with_weights(src_file->ICEFRAC,wgtFileName,Opt_RGRD)
   ;__________________________________________________________
   ; define icemask as 1 where icefrac > .15
   ;__________________________________________________________
              sim1x1=where(icefrac1x1.gt..15,1.,0.)
              landfrac1x1=ESMF_regrid_with_weights(src_file->LANDFRAC,wgtFileName,Opt_RGRD)
   ;__________________________________________________________
   ; define lsm  as 1 where landfrac > .5
   ;__________________________________________________________
              lsm1x1=where(landfrac1x1.gt.0.5,1.,0.)
   ;__________________________________________________________
   ; apply icemask to tskin
   ;__________________________________________________________
              ts1x1=ESMF_regrid_with_weights(src_file->TS,wgtFileName,Opt_RGRD)
              ts1x1@_FillValue = 1.e+20
              ts1x1=where(sim1x1.eq.1.,273.15-1.8,ts1x1)
              ts1x1=where(lsm1x1.eq.1.,ts1x1@_FillValue,ts1x1)
              print("ok computed sst")
              dst_file->$varout(k)$ = (/ts1x1/)
           end if
           if ( varout(k).eq."tsl") then
              landfrac1x1=ESMF_regrid_with_weights(src_file->LANDFRAC,wgtFileName,Opt_RGRD)
   ;__________________________________________________________
   ; define lsm  as 1 where landfrac > .5
   ;__________________________________________________________
              lsm1x1=where(landfrac1x1.gt.0.5,1.,0.)
              ts1x1=ESMF_regrid_with_weights(src_file->TS,wgtFileName,Opt_RGRD)
              outvar=ts1x1*lsm1x1
              outvar@_FillValue = 1.e+20
              outvar=where(outvar.eq.0.,outvar@_FillValue,outvar)
              dst_file->$varout(k)$ = (/ outvar/)
           end if
           if ( varout(k).eq."clt") then
              if(any(var2regrid.lt.-1.e-12))  then
                    print("clt contains one or more values lower than -1.e-12, cannot continue.")
                    exit
             end if
             tmpclt = (/ ESMF_regrid_with_weights(var2regrid,wgtFileName,Opt_RGRD) /)
             tmpclt=where(tmpclt.lt.0.,0.,tmpclt)
             dst_file->$varout(k)$ = (/ tmpclt/)
             delete(tmpclt)
           end if
           if (varout(k).eq."precip") then
               if(any(var2regrid.lt.-0.005))  then
                     print("lwepr contains one or more values lower than -5mm/day, cannot continue.")
                  exit
               end if
               var2regrid=where(var2regrid.lt.0.,0.,var2regrid)
           end if
   ;__________________________________________________________
           if (varout(k).eq."lweprsn") then
; convert into m/month
                  var2regrid=(src_file->PRECSL*conv_fac(k)+src_file->PRECSC*conv_fac(k))
                  var2regrid=where(var2regrid.lt.0.,0.,var2regrid)
           end if
         else   ; rlt
            var2regrid=conv_fac(k)*(src_file->FSNTOA-src_file->FSNT+src_file->FLNT)
            dst_file->$varout(k)$ = (/ ESMF_regrid_with_weights(var2regrid,wgtFileName,Opt_RGRD) /)
            delete(var2regrid)
         end if
      end if
   end do
; touch file to state that the process is correctly finished
  checkfile=getenv("checkfile")
  system("touch "+checkfile)
end
